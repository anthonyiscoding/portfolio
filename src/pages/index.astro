---
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import About from "../components/About.astro";
import Projects from "../components/Projects.astro";
import Experience from "../components/Experience.astro";
import Education from "../components/Education.astro";
import Footer from "../components/Footer.astro";
import { siteConfig } from "../config";
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={siteConfig.description} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
    <title>{siteConfig.name} - {siteConfig.title}</title>
  </head>
  <body>
    <div
      class="relative isolate overflow-hidden bg-white min-h-screen"
      style={`--accent-color: ${siteConfig.accentColor}`}
    >
      <!-- Gradient overlay -->
      <div
        id="gradient-overlay"
        class="fixed inset-0 -z-10 transition-all duration-300 ease-out"
        style={`background: radial-gradient(ellipse 800px 1200px at 0% 0%, ${siteConfig.accentColor}40 0%, ${siteConfig.accentColor}25 20%, ${siteConfig.accentColor}10 40%, rgba(255, 255, 255, 0.3) 70%, rgba(255, 255, 255, 0.8) 90%, white 100%)`}
      >
      </div>
      <!-- Animated line with spark -->
      <svg
        id="animated-line"
        class="absolute top-0 left-0 -z-10 pointer-events-none"
        style="width: 100%; height: 100%;"
      >
        <defs>
          <linearGradient id="line-gradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop
              offset="0%"
              style={`stop-color:${siteConfig.accentColor};stop-opacity:0.05`}
            ></stop>
            <stop
              offset="100%"
              style={`stop-color:${siteConfig.accentColor};stop-opacity:0.1`}
            ></stop>
          </linearGradient>
          <filter id="glow">
            <feGaussianBlur stdDeviation="3" result="coloredBlur"
            ></feGaussianBlur>
            <feMerge>
              <feMergeNode in="coloredBlur"></feMergeNode>
              <feMergeNode in="SourceGraphic"></feMergeNode>
            </feMerge>
          </filter>
        </defs>
        <path
          id="line-path"
          d="M 0,0"
          stroke="url(#line-gradient)"
          stroke-width="2"
          fill="none"
          filter="url(#glow)"></path>
        <circle
          id="spark"
          r="4"
          fill={siteConfig.accentColor}
          filter="url(#glow)"
          opacity="0"
        >
          <animate
            attributeName="r"
            values="3;5;3"
            dur="0.6s"
            repeatCount="indefinite"></animate>
          <animate
            attributeName="opacity"
            values="0.6;1;0.6"
            dur="0.6s"
            repeatCount="indefinite"></animate>
        </circle>
      </svg>
      <svg
        aria-hidden="true"
        class="fixed inset-0 -z-10 size-full stroke-gray-300 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
      >
        <defs>
          <pattern
            id="programming-symbols"
            x="0"
            y="0"
            width="400"
            height="400"
            patternUnits="userSpaceOnUse"
          >
            <text
              x="50"
              y="50"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(-15)">&lt;/&gt;</text
            >
            <text
              x="150"
              y="100"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(10)">{}</text
            >
            <text
              x="250"
              y="80"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="18"
              transform="rotate(-5)">=&gt;</text
            >
            <text
              x="100"
              y="200"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="22"
              transform="rotate(15)">[]</text
            >
            <text
              x="300"
              y="180"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(-10)">&lt;&gt;</text
            >
            <text
              x="200"
              y="250"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(5)">()</text
            >
            <text
              x="50"
              y="320"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="18"
              transform="rotate(-8)">::</text
            >
            <text
              x="350"
              y="300"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="22"
              transform="rotate(12)">==</text
            >
            <text
              x="150"
              y="350"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(-15)">++</text
            >
            <text
              x="250"
              y="370"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(8)">;</text
            >
          </pattern>
        </defs>
        <rect
          fill="url(#programming-symbols)"
          width="100%"
          height="100%"
          opacity="0.2"></rect>
      </svg>
      <Header />
      <section>
        <Hero />
        <About />
        <Projects />
        <Experience />
        <Education />
      </section>
      <Footer />
    </div>
    <script define:vars={{ accentColor: siteConfig.accentColor }}>
      const gradientOverlay = document.getElementById("gradient-overlay");
      const linePath = document.getElementById("line-path");
      const spark = document.getElementById("spark");

      let mouseX = 0;
      let mouseY = 0;
      let scrollAmount = 0;

      // Convert hex to HSL
      function hexToHSL(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (!result) return { h: 210, s: 100, l: 50 }; // default blue

        let r = parseInt(result[1], 16) / 255;
        let g = parseInt(result[2], 16) / 255;
        let b = parseInt(result[3], 16) / 255;

        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h,
          s,
          l = (max + min) / 2;

        if (max === min) {
          h = s = 0;
        } else {
          const d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r:
              h = ((g - b) / d + (g < b ? 6 : 0)) / 6;
              break;
            case g:
              h = ((b - r) / d + 2) / 6;
              break;
            case b:
              h = ((r - g) / d + 4) / 6;
              break;
          }
        }

        return {
          h: Math.round(h * 360),
          s: Math.round(s * 100),
          l: Math.round(l * 100),
        };
      }

      const baseHSL = hexToHSL(accentColor);

      // Mouse move handler
      document.addEventListener("mousemove", (e) => {
        mouseX = (e.clientX / window.innerWidth) * 5;
        mouseY = (e.clientY / window.innerHeight) * 5;
        updateGradient();
      });

      // Scroll handler
      document.addEventListener("scroll", () => {
        scrollAmount =
          window.scrollY /
          (document.documentElement.scrollHeight - window.innerHeight);
        updateGradient();
        updateLine();
      });

      function updateLine() {
        if (!linePath || !spark) return;

        const svgWidth = window.innerWidth;
        const totalDocHeight = document.documentElement.scrollHeight;

        // Update SVG height to match document
        const svg = document.getElementById("animated-line");
        if (svg) {
          svg.style.height = `${totalDocHeight}px`;
        }

        const startX = 24;
        const startY = 0;

        // Define segment sizes for the zigzag pattern
        const horizontalSegment = svgWidth * 0.1; // How far left/right each horizontal segment goes
        const verticalSegment = horizontalSegment * 5; // 5x horizontal for more vertical movement

        // Calculate total length to draw based on scroll position
        // Start with at least window height so line is visible initially
        const totalLength = window.scrollY + window.innerHeight;

        let pathData = `M ${startX},${startY}`;
        let currentX = startX;
        let currentY = startY;
        let remainingLength = totalLength;
        let segmentIndex = 0;
        let endX = startX;
        let endY = startY;

        // Build the zigzag path: down → right → down → left → down → right → ...
        while (remainingLength > 0 && segmentIndex < 100) {
          const segment = segmentIndex % 4;

          if (segment === 0 || segment === 2) {
            // Vertical segments (down)
            const segmentLength = Math.min(remainingLength, verticalSegment);
            if (segmentLength > 0) {
              currentY += segmentLength;
              pathData += ` L ${currentX},${currentY}`;
              endX = currentX;
              endY = currentY;
              remainingLength -= segmentLength;
            }
          } else if (segment === 1) {
            // Horizontal segment (right)
            const segmentLength = Math.min(remainingLength, horizontalSegment);
            if (segmentLength > 0) {
              currentX += segmentLength;
              pathData += ` L ${currentX},${currentY}`;
              endX = currentX;
              endY = currentY;
              remainingLength -= segmentLength;
            }
          } else if (segment === 3) {
            // Horizontal segment (left)
            const segmentLength = Math.min(remainingLength, horizontalSegment);
            if (segmentLength > 0) {
              currentX -= segmentLength;
              pathData += ` L ${currentX},${currentY}`;
              endX = currentX;
              endY = currentY;
              remainingLength -= segmentLength;
            }
          }

          segmentIndex++;
        }

        linePath.setAttribute("d", pathData);

        // Position spark at the end of the line
        spark.setAttribute("cx", endX);
        spark.setAttribute("cy", endY);
        spark.setAttribute(
          "opacity",
          scrollAmount > 0 || window.scrollY > 0 ? "1" : "0"
        );
      }

      function updateGradient() {
        if (gradientOverlay) {
          const xPercent = mouseX + scrollAmount * 8;
          const yPercent = mouseY + scrollAmount * 8;

          // Create a wave that oscillates 3 times over the page scroll
          // sin wave goes from -1 to 1, we convert to 0.7 to 1.3 for size multiplier
          const wavePhase = scrollAmount * Math.PI * 6; // 3 full cycles (6π)
          const sizeMultiplier = 1 + Math.sin(wavePhase) * 0.3; // Oscillates between 0.7 and 1.3

          // Add mouse influence to the wave
          const mouseWave = Math.sin((mouseX + mouseY) * 0.5) * 0.1;
          const finalMultiplier = sizeMultiplier + mouseWave;

          const ellipseWidth = (800 + xPercent * 15) * finalMultiplier;
          const ellipseHeight = (1200 + yPercent * 15) * finalMultiplier;

          // Calculate hue rotation: full 360° cycle based on scroll progress (0 to 1)
          // Add small mouse influence for interactive feel
          const hueShift = scrollAmount * 360 + (mouseX + mouseY) * 5;
          const newHue = (baseHSL.h + hueShift) % 360;

          const color1 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.4)`;
          const color2 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.25)`;
          const color3 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.1)`;

          gradientOverlay.style.background = `radial-gradient(ellipse ${ellipseWidth}px ${ellipseHeight}px at ${xPercent}% ${yPercent}%, ${color1} 0%, ${color2} 20%, ${color3} 40%, rgba(255, 255, 255, 0.3) 70%, rgba(255, 255, 255, 0.8) 90%, white 100%)`;
        }
      }

      // Initialize line on load
      updateLine();
    </script>
  </body>
</html>
