---
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import About from "../components/About.astro";
import Projects from "../components/Projects.astro";
import Experience from "../components/Experience.astro";
import Education from "../components/Education.astro";
import Footer from "../components/Footer.astro";
import { siteConfig } from "../config";
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={siteConfig.description} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
    <title>{siteConfig.name} - {siteConfig.title}</title>
  </head>
  <body>
    <div
      class="relative isolate overflow-hidden bg-white min-h-screen"
      style={`--accent-color: ${siteConfig.accentColor}`}
    >
      <!-- Gradient overlay -->
      <div
        id="gradient-overlay"
        class="fixed inset-0 -z-10 transition-all duration-300 ease-out"
        style={`background: radial-gradient(ellipse 800px 1200px at 0% 0%, ${siteConfig.accentColor}40 0%, ${siteConfig.accentColor}25 20%, ${siteConfig.accentColor}10 40%, rgba(255, 255, 255, 0.3) 70%, rgba(255, 255, 255, 0.8) 90%, white 100%)`}
      >
      </div>
      <svg
        aria-hidden="true"
        class="fixed inset-0 -z-10 size-full stroke-gray-200 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
      >
        <defs>
          <pattern
            x="50%"
            y={-1}
            id="0787a7c5-978c-4f66-83c7-11c213f99cb7"
            width={200}
            height={200}
            patternUnits="userSpaceOnUse"
          >
            <path d="M.5 200V.5H200" fill="none"></path>
          </pattern>
          <pattern
            id="programming-symbols"
            x="0"
            y="0"
            width="400"
            height="400"
            patternUnits="userSpaceOnUse"
          >
            <text
              x="50"
              y="50"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(-15)">&lt;/&gt;</text
            >
            <text
              x="150"
              y="100"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(10)">{}</text
            >
            <text
              x="250"
              y="80"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="18"
              transform="rotate(-5)">=&gt;</text
            >
            <text
              x="100"
              y="200"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="22"
              transform="rotate(15)">[]</text
            >
            <text
              x="300"
              y="180"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(-10)">&lt;&gt;</text
            >
            <text
              x="200"
              y="250"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(5)">()</text
            >
            <text
              x="50"
              y="320"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="18"
              transform="rotate(-8)">::</text
            >
            <text
              x="350"
              y="300"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="22"
              transform="rotate(12)">==</text
            >
            <text
              x="150"
              y="350"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="20"
              transform="rotate(-15)">++</text
            >
            <text
              x="250"
              y="370"
              fill={siteConfig.accentColor}
              font-family="monospace"
              font-size="24"
              transform="rotate(8)">;</text
            >
          </pattern>
        </defs>
        <rect
          fill="url(#programming-symbols)"
          width="100%"
          height="100%"
          opacity="0.2"></rect>
        <rect
          fill="url(#0787a7c5-978c-4f66-83c7-11c213f99cb7)"
          width="100%"
          height="100%"
          stroke-width={0}></rect>
      </svg>
      <Header />
      <section>
        <Hero />
        <About />
        <Projects />
        <Experience />
        <Education />
      </section>
      <Footer />
    </div>
    <script define:vars={{ accentColor: siteConfig.accentColor }}>
      const gradientOverlay = document.getElementById("gradient-overlay");

      let mouseX = 0;
      let mouseY = 0;
      let scrollAmount = 0;

      // Convert hex to HSL
      function hexToHSL(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (!result) return { h: 210, s: 100, l: 50 }; // default blue

        let r = parseInt(result[1], 16) / 255;
        let g = parseInt(result[2], 16) / 255;
        let b = parseInt(result[3], 16) / 255;

        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h,
          s,
          l = (max + min) / 2;

        if (max === min) {
          h = s = 0;
        } else {
          const d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r:
              h = ((g - b) / d + (g < b ? 6 : 0)) / 6;
              break;
            case g:
              h = ((b - r) / d + 2) / 6;
              break;
            case b:
              h = ((r - g) / d + 4) / 6;
              break;
          }
        }

        return {
          h: Math.round(h * 360),
          s: Math.round(s * 100),
          l: Math.round(l * 100),
        };
      }

      const baseHSL = hexToHSL(accentColor);

      // Mouse move handler
      document.addEventListener("mousemove", (e) => {
        mouseX = (e.clientX / window.innerWidth) * 5;
        mouseY = (e.clientY / window.innerHeight) * 5;
        updateGradient();
      });

      // Scroll handler
      document.addEventListener("scroll", () => {
        scrollAmount =
          (window.scrollY / document.documentElement.scrollHeight) * 8;
        updateGradient();
      });

      function updateGradient() {
        if (gradientOverlay) {
          const xPercent = mouseX + scrollAmount;
          const yPercent = mouseY + scrollAmount;
          const ellipseWidth = 800 + xPercent * 15;
          const ellipseHeight = 1200 + yPercent * 15;

          // Calculate hue rotation based on mouse and scroll position
          const hueShift = ((mouseX + mouseY + scrollAmount) * 10) % 360;
          const newHue = (baseHSL.h + hueShift) % 360;

          const color1 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.4)`;
          const color2 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.25)`;
          const color3 = `hsla(${newHue}, ${baseHSL.s}%, ${baseHSL.l}%, 0.1)`;

          gradientOverlay.style.background = `radial-gradient(ellipse ${ellipseWidth}px ${ellipseHeight}px at ${xPercent}% ${yPercent}%, ${color1} 0%, ${color2} 20%, ${color3} 40%, rgba(255, 255, 255, 0.3) 70%, rgba(255, 255, 255, 0.8) 90%, white 100%)`;
        }
      }
    </script>
  </body>
</html>
